1. Вопросы менеджеру:

1.1. Могут ли динамически дополняться поля в Excel?
1.2. Должны ли быть ограничения по размеру файла или количеству строк?
1.3. Какие конкретно правила валидации важны? Например поле id уникальное, только целое число, date должно соотвествовать 1 формату даты и т.д.
1.4. Что необходимо сделать с файлом, в котором собрали ошибочные строки? Пользователь должен иметь возможность его скачать или он должен отправиться на почту?
1.5. Сохранять файл необходимо в папке пользователя, чтобы в дальнейшем его не потерять?
1.6. Нужно ли иметь возможность сохранить в базу запись по работе с файлом, например (user_id, file_name, date, completed). Для возможности логирования ошибок
1.7. Есть ли ограничение на время выполнения импорта?
1.8. Важно ли выполнение в реальном времени или можно выполнять на фоне?
1.9. Какой уникальный ключ необходимо использовать в Redis, они должны быть связаны с пользователем или сессией?
1.10. Есть готовое решение для WebSockets сервера? Или же его нужно написать\настроить с нуля?
1.11. Какие параметры фильтрации допустимы? Нужно ли реализовать пагинацию?
1.12. Необходимо ли обновлять уже импортированные записи через Excel?
1.13. Нужно ли отправлять событие при каждой успешной вставке строки из файла или только после завершения импорта?

2. Задачи для Джуна:

2.1. Необходимо добавить миграцию для создания таблицы rows. Поля:
id (integer)
name (string)
date (timestamp)
2.2. Реализовать простую форму для загрузки файла Excel:
Рекомендую Laravel blade, так как он прост в использовании и не требует доп изучения либы, как в случае с админ системами\vue.
2.3. Реализовать метод POST, который принимает файл формата Excel. Добавить валидацию на уровне Request.
2.4. Написать класс валидатора, который принимает данные из файла и построчно их обрабатывает. Добавить базовые проверки:
id — число, уникальное внутри файла.
name — строка, не пустая.
date - дата в формате d.m.Y.
2.5. Если строка не прошла валидацию, пропускаешь и записываешь в отдельный массив для дальнейшей обработки. В противном случае записываем в БД.
Строки, которые не прошли валидацию необходимо сохранять в отдельный файл с структурой: <номер строки> - <ошибка1>, <ошибка2>.
Файл пока просто хранить на сервере
2.6. Прогресс обработки необходимо сохранить. Для этого нужно подключить Redis и хранить данные в формате (уникальный ключ - количество обработанных строк). Руководство по настройке и использованию Redis можно найти в официальной документации Laravel
2.7. После успешной загрузки и сохранения данных, отправлять событие через Laravel Echo о создании новой записи.
Для websocet сервера может подойти, Laravel WebSockets, Pusher Sockert.IO, Ratchet.
Первый беспалтный open-source и легок в настройке, остальные могут потребовать интеграцию и доп настройку.
Информация про Laravel Echo находится в документации Laravel, там же примерно описано как интегрироваться с WebSockets.
2.8. Реализовать метод GET для получения данных из таблицы rows. Эндопинт должен соотвествовать требованиям RESTful.
Данные должны быть сгруппированны по дате. Фильтры и пагинация не нужны. Пример:
date: ‘xxxx-xx-xx’,
	items: [
		{
			…
		},
		{
			…
		}
	]
2.9. Необходимо покрыть функционал тестами.
Импорт файла. Обязательно замокать сервис сохранения данных в бд.
Подключение к WebSockets серверу. Пуш сообщения также замокать.
Получение данных с правильной группировкой.
Для работы с Excle использовать библиотеку maatwebsite/excel. Перед использованием прочитать документацию.

Ход мыслей:
По первому пункту. Задача пришла хоть и по шагам, но слишком абстрактно. Поэтому для качественной реализации необходимо подробное проектирование.
По второму пункту. Джун знает необходимый базис, хоть и кажется, что подключить редис с laravel echo будет проблематично.
Поэтому я по шагам описал, что надо сделать и дал рекомендации, где можно взять информацию, чтобы его направить, но и он сам разбирался с процессом.
